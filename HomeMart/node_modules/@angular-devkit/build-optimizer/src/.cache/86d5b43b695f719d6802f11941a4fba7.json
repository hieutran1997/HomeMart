{"remainingRequest":"F:\\HomeMart\\HomeMart\\HomeMart\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!F:\\HomeMart\\HomeMart\\HomeMart\\node_modules\\socket.io-client\\node_modules\\socket.io-parser\\binary.js","dependencies":[{"path":"F:\\HomeMart\\HomeMart\\HomeMart\\node_modules\\socket.io-client\\node_modules\\socket.io-parser\\binary.js","mtime":1540010394949},{"path":"F:\\HomeMart\\HomeMart\\HomeMart\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1540005215864},{"path":"F:\\HomeMart\\HomeMart\\HomeMart\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1540003001410}],"contextDependencies":[],"result":["/*global Blob,File*/\r\n\r\n/**\r\n * Module requirements\r\n */\r\n\r\nvar isArray = require('isarray');\r\nvar isBuf = require('./is-buffer');\r\nvar toString = Object.prototype.toString;\r\nvar withNativeBlob = typeof global.Blob === 'function' || toString.call(global.Blob) === '[object BlobConstructor]';\r\nvar withNativeFile = typeof global.File === 'function' || toString.call(global.File) === '[object FileConstructor]';\r\n\r\n/**\r\n * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.\r\n * Anything with blobs or files should be fed through removeBlobs before coming\r\n * here.\r\n *\r\n * @param {Object} packet - socket.io event packet\r\n * @return {Object} with deconstructed packet and list of buffers\r\n * @api public\r\n */\r\n\r\nexports.deconstructPacket = function(packet) {\r\n  var buffers = [];\r\n  var packetData = packet.data;\r\n  var pack = packet;\r\n  pack.data = _deconstructPacket(packetData, buffers);\r\n  pack.attachments = buffers.length; // number of binary 'attachments'\r\n  return {packet: pack, buffers: buffers};\r\n};\r\n\r\nfunction _deconstructPacket(data, buffers) {\r\n  if (!data) return data;\r\n\r\n  if (isBuf(data)) {\r\n    var placeholder = { _placeholder: true, num: buffers.length };\r\n    buffers.push(data);\r\n    return placeholder;\r\n  } else if (isArray(data)) {\r\n    var newData = new Array(data.length);\r\n    for (var i = 0; i < data.length; i++) {\r\n      newData[i] = _deconstructPacket(data[i], buffers);\r\n    }\r\n    return newData;\r\n  } else if (typeof data === 'object' && !(data instanceof Date)) {\r\n    var newData = {};\r\n    for (var key in data) {\r\n      newData[key] = _deconstructPacket(data[key], buffers);\r\n    }\r\n    return newData;\r\n  }\r\n  return data;\r\n}\r\n\r\n/**\r\n * Reconstructs a binary packet from its placeholder packet and buffers\r\n *\r\n * @param {Object} packet - event packet with placeholders\r\n * @param {Array} buffers - binary buffers to put in placeholder positions\r\n * @return {Object} reconstructed packet\r\n * @api public\r\n */\r\n\r\nexports.reconstructPacket = function(packet, buffers) {\r\n  packet.data = _reconstructPacket(packet.data, buffers);\r\n  packet.attachments = undefined; // no longer useful\r\n  return packet;\r\n};\r\n\r\nfunction _reconstructPacket(data, buffers) {\r\n  if (!data) return data;\r\n\r\n  if (data && data._placeholder) {\r\n    return buffers[data.num]; // appropriate buffer (should be natural order anyway)\r\n  } else if (isArray(data)) {\r\n    for (var i = 0; i < data.length; i++) {\r\n      data[i] = _reconstructPacket(data[i], buffers);\r\n    }\r\n  } else if (typeof data === 'object') {\r\n    for (var key in data) {\r\n      data[key] = _reconstructPacket(data[key], buffers);\r\n    }\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n/**\r\n * Asynchronously removes Blobs or Files from data via\r\n * FileReader's readAsArrayBuffer method. Used before encoding\r\n * data as msgpack. Calls callback with the blobless data.\r\n *\r\n * @param {Object} data\r\n * @param {Function} callback\r\n * @api private\r\n */\r\n\r\nexports.removeBlobs = function(data, callback) {\r\n  function _removeBlobs(obj, curKey, containingObject) {\r\n    if (!obj) return obj;\r\n\r\n    // convert any blob\r\n    if ((withNativeBlob && obj instanceof Blob) ||\r\n        (withNativeFile && obj instanceof File)) {\r\n      pendingBlobs++;\r\n\r\n      // async filereader\r\n      var fileReader = new FileReader();\r\n      fileReader.onload = function() { // this.result == arraybuffer\r\n        if (containingObject) {\r\n          containingObject[curKey] = this.result;\r\n        }\r\n        else {\r\n          bloblessData = this.result;\r\n        }\r\n\r\n        // if nothing pending its callback time\r\n        if(! --pendingBlobs) {\r\n          callback(bloblessData);\r\n        }\r\n      };\r\n\r\n      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer\r\n    } else if (isArray(obj)) { // handle array\r\n      for (var i = 0; i < obj.length; i++) {\r\n        _removeBlobs(obj[i], i, obj);\r\n      }\r\n    } else if (typeof obj === 'object' && !isBuf(obj)) { // and object\r\n      for (var key in obj) {\r\n        _removeBlobs(obj[key], key, obj);\r\n      }\r\n    }\r\n  }\r\n\r\n  var pendingBlobs = 0;\r\n  var bloblessData = data;\r\n  _removeBlobs(bloblessData);\r\n  if (!pendingBlobs) {\r\n    callback(bloblessData);\r\n  }\r\n};\r\n",null]}