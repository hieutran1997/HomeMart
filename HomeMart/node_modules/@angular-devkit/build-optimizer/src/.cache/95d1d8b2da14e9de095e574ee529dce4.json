{"remainingRequest":"F:\\HomeMart\\HomeMart\\HomeMart\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!F:\\HomeMart\\HomeMart\\HomeMart\\node_modules\\socket.io-client\\lib\\manager.js","dependencies":[{"path":"F:\\HomeMart\\HomeMart\\HomeMart\\node_modules\\socket.io-client\\lib\\manager.js","mtime":1540010389729},{"path":"F:\\HomeMart\\HomeMart\\HomeMart\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1540005215864},{"path":"F:\\HomeMart\\HomeMart\\HomeMart\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1540003001410}],"contextDependencies":[],"result":["\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar eio = require('engine.io-client');\r\nvar Socket = require('./socket');\r\nvar Emitter = require('component-emitter');\r\nvar parser = require('socket.io-parser');\r\nvar on = require('./on');\r\nvar bind = require('component-bind');\r\nvar debug = require('debug')('socket.io-client:manager');\r\nvar indexOf = require('indexof');\r\nvar Backoff = require('backo2');\r\n\r\n/**\r\n * IE6+ hasOwnProperty\r\n */\r\n\r\nvar has = Object.prototype.hasOwnProperty;\r\n\r\n/**\r\n * Module exports\r\n */\r\n\r\nmodule.exports = Manager;\r\n\r\n/**\r\n * `Manager` constructor.\r\n *\r\n * @param {String} engine instance or engine uri/opts\r\n * @param {Object} options\r\n * @api public\r\n */\r\n\r\nfunction Manager (uri, opts) {\r\n  if (!(this instanceof Manager)) return new Manager(uri, opts);\r\n  if (uri && ('object' === typeof uri)) {\r\n    opts = uri;\r\n    uri = undefined;\r\n  }\r\n  opts = opts || {};\r\n\r\n  opts.path = opts.path || '/socket.io';\r\n  this.nsps = {};\r\n  this.subs = [];\r\n  this.opts = opts;\r\n  this.reconnection(opts.reconnection !== false);\r\n  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\r\n  this.reconnectionDelay(opts.reconnectionDelay || 1000);\r\n  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\r\n  this.randomizationFactor(opts.randomizationFactor || 0.5);\r\n  this.backoff = new Backoff({\r\n    min: this.reconnectionDelay(),\r\n    max: this.reconnectionDelayMax(),\r\n    jitter: this.randomizationFactor()\r\n  });\r\n  this.timeout(null == opts.timeout ? 20000 : opts.timeout);\r\n  this.readyState = 'closed';\r\n  this.uri = uri;\r\n  this.connecting = [];\r\n  this.lastPing = null;\r\n  this.encoding = false;\r\n  this.packetBuffer = [];\r\n  var _parser = opts.parser || parser;\r\n  this.encoder = new _parser.Encoder();\r\n  this.decoder = new _parser.Decoder();\r\n  this.autoConnect = opts.autoConnect !== false;\r\n  if (this.autoConnect) this.open();\r\n}\r\n\r\n/**\r\n * Propagate given event to sockets and emit on `this`\r\n *\r\n * @api private\r\n */\r\n\r\nManager.prototype.emitAll = function () {\r\n  this.emit.apply(this, arguments);\r\n  for (var nsp in this.nsps) {\r\n    if (has.call(this.nsps, nsp)) {\r\n      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Update `socket.id` of all sockets\r\n *\r\n * @api private\r\n */\r\n\r\nManager.prototype.updateSocketIds = function () {\r\n  for (var nsp in this.nsps) {\r\n    if (has.call(this.nsps, nsp)) {\r\n      this.nsps[nsp].id = this.generateId(nsp);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * generate `socket.id` for the given `nsp`\r\n *\r\n * @param {String} nsp\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nManager.prototype.generateId = function (nsp) {\r\n  return (nsp === '/' ? '' : (nsp + '#')) + this.engine.id;\r\n};\r\n\r\n/**\r\n * Mix in `Emitter`.\r\n */\r\n\r\nEmitter(Manager.prototype);\r\n\r\n/**\r\n * Sets the `reconnection` config.\r\n *\r\n * @param {Boolean} true/false if it should automatically reconnect\r\n * @return {Manager} self or value\r\n * @api public\r\n */\r\n\r\nManager.prototype.reconnection = function (v) {\r\n  if (!arguments.length) return this._reconnection;\r\n  this._reconnection = !!v;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Sets the reconnection attempts config.\r\n *\r\n * @param {Number} max reconnection attempts before giving up\r\n * @return {Manager} self or value\r\n * @api public\r\n */\r\n\r\nManager.prototype.reconnectionAttempts = function (v) {\r\n  if (!arguments.length) return this._reconnectionAttempts;\r\n  this._reconnectionAttempts = v;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Sets the delay between reconnections.\r\n *\r\n * @param {Number} delay\r\n * @return {Manager} self or value\r\n * @api public\r\n */\r\n\r\nManager.prototype.reconnectionDelay = function (v) {\r\n  if (!arguments.length) return this._reconnectionDelay;\r\n  this._reconnectionDelay = v;\r\n  this.backoff && this.backoff.setMin(v);\r\n  return this;\r\n};\r\n\r\nManager.prototype.randomizationFactor = function (v) {\r\n  if (!arguments.length) return this._randomizationFactor;\r\n  this._randomizationFactor = v;\r\n  this.backoff && this.backoff.setJitter(v);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Sets the maximum delay between reconnections.\r\n *\r\n * @param {Number} delay\r\n * @return {Manager} self or value\r\n * @api public\r\n */\r\n\r\nManager.prototype.reconnectionDelayMax = function (v) {\r\n  if (!arguments.length) return this._reconnectionDelayMax;\r\n  this._reconnectionDelayMax = v;\r\n  this.backoff && this.backoff.setMax(v);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Sets the connection timeout. `false` to disable\r\n *\r\n * @return {Manager} self or value\r\n * @api public\r\n */\r\n\r\nManager.prototype.timeout = function (v) {\r\n  if (!arguments.length) return this._timeout;\r\n  this._timeout = v;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Starts trying to reconnect if reconnection is enabled and we have not\r\n * started reconnecting yet\r\n *\r\n * @api private\r\n */\r\n\r\nManager.prototype.maybeReconnectOnOpen = function () {\r\n  // Only try to reconnect if it's the first time we're connecting\r\n  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {\r\n    // keeps reconnection from firing twice for the same reconnection loop\r\n    this.reconnect();\r\n  }\r\n};\r\n\r\n/**\r\n * Sets the current transport `socket`.\r\n *\r\n * @param {Function} optional, callback\r\n * @return {Manager} self\r\n * @api public\r\n */\r\n\r\nManager.prototype.open =\r\nManager.prototype.connect = function (fn, opts) {\r\n  debug('readyState %s', this.readyState);\r\n  if (~this.readyState.indexOf('open')) return this;\r\n\r\n  debug('opening %s', this.uri);\r\n  this.engine = eio(this.uri, this.opts);\r\n  var socket = this.engine;\r\n  var self = this;\r\n  this.readyState = 'opening';\r\n  this.skipReconnect = false;\r\n\r\n  // emit `open`\r\n  var openSub = on(socket, 'open', function () {\r\n    self.onopen();\r\n    fn && fn();\r\n  });\r\n\r\n  // emit `connect_error`\r\n  var errorSub = on(socket, 'error', function (data) {\r\n    debug('connect_error');\r\n    self.cleanup();\r\n    self.readyState = 'closed';\r\n    self.emitAll('connect_error', data);\r\n    if (fn) {\r\n      var err = new Error('Connection error');\r\n      err.data = data;\r\n      fn(err);\r\n    } else {\r\n      // Only do this if there is no fn to handle the error\r\n      self.maybeReconnectOnOpen();\r\n    }\r\n  });\r\n\r\n  // emit `connect_timeout`\r\n  if (false !== this._timeout) {\r\n    var timeout = this._timeout;\r\n    debug('connect attempt will timeout after %d', timeout);\r\n\r\n    // set timer\r\n    var timer = setTimeout(function () {\r\n      debug('connect attempt timed out after %d', timeout);\r\n      openSub.destroy();\r\n      socket.close();\r\n      socket.emit('error', 'timeout');\r\n      self.emitAll('connect_timeout', timeout);\r\n    }, timeout);\r\n\r\n    this.subs.push({\r\n      destroy: function () {\r\n        clearTimeout(timer);\r\n      }\r\n    });\r\n  }\r\n\r\n  this.subs.push(openSub);\r\n  this.subs.push(errorSub);\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Called upon transport open.\r\n *\r\n * @api private\r\n */\r\n\r\nManager.prototype.onopen = function () {\r\n  debug('open');\r\n\r\n  // clear old subs\r\n  this.cleanup();\r\n\r\n  // mark as open\r\n  this.readyState = 'open';\r\n  this.emit('open');\r\n\r\n  // add new subs\r\n  var socket = this.engine;\r\n  this.subs.push(on(socket, 'data', bind(this, 'ondata')));\r\n  this.subs.push(on(socket, 'ping', bind(this, 'onping')));\r\n  this.subs.push(on(socket, 'pong', bind(this, 'onpong')));\r\n  this.subs.push(on(socket, 'error', bind(this, 'onerror')));\r\n  this.subs.push(on(socket, 'close', bind(this, 'onclose')));\r\n  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));\r\n};\r\n\r\n/**\r\n * Called upon a ping.\r\n *\r\n * @api private\r\n */\r\n\r\nManager.prototype.onping = function () {\r\n  this.lastPing = new Date();\r\n  this.emitAll('ping');\r\n};\r\n\r\n/**\r\n * Called upon a packet.\r\n *\r\n * @api private\r\n */\r\n\r\nManager.prototype.onpong = function () {\r\n  this.emitAll('pong', new Date() - this.lastPing);\r\n};\r\n\r\n/**\r\n * Called with data.\r\n *\r\n * @api private\r\n */\r\n\r\nManager.prototype.ondata = function (data) {\r\n  this.decoder.add(data);\r\n};\r\n\r\n/**\r\n * Called when parser fully decodes a packet.\r\n *\r\n * @api private\r\n */\r\n\r\nManager.prototype.ondecoded = function (packet) {\r\n  this.emit('packet', packet);\r\n};\r\n\r\n/**\r\n * Called upon socket error.\r\n *\r\n * @api private\r\n */\r\n\r\nManager.prototype.onerror = function (err) {\r\n  debug('error', err);\r\n  this.emitAll('error', err);\r\n};\r\n\r\n/**\r\n * Creates a new socket for the given `nsp`.\r\n *\r\n * @return {Socket}\r\n * @api public\r\n */\r\n\r\nManager.prototype.socket = function (nsp, opts) {\r\n  var socket = this.nsps[nsp];\r\n  if (!socket) {\r\n    socket = new Socket(this, nsp, opts);\r\n    this.nsps[nsp] = socket;\r\n    var self = this;\r\n    socket.on('connecting', onConnecting);\r\n    socket.on('connect', function () {\r\n      socket.id = self.generateId(nsp);\r\n    });\r\n\r\n    if (this.autoConnect) {\r\n      // manually call here since connecting event is fired before listening\r\n      onConnecting();\r\n    }\r\n  }\r\n\r\n  function onConnecting () {\r\n    if (!~indexOf(self.connecting, socket)) {\r\n      self.connecting.push(socket);\r\n    }\r\n  }\r\n\r\n  return socket;\r\n};\r\n\r\n/**\r\n * Called upon a socket close.\r\n *\r\n * @param {Socket} socket\r\n */\r\n\r\nManager.prototype.destroy = function (socket) {\r\n  var index = indexOf(this.connecting, socket);\r\n  if (~index) this.connecting.splice(index, 1);\r\n  if (this.connecting.length) return;\r\n\r\n  this.close();\r\n};\r\n\r\n/**\r\n * Writes a packet.\r\n *\r\n * @param {Object} packet\r\n * @api private\r\n */\r\n\r\nManager.prototype.packet = function (packet) {\r\n  debug('writing packet %j', packet);\r\n  var self = this;\r\n  if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;\r\n\r\n  if (!self.encoding) {\r\n    // encode, then write to engine with result\r\n    self.encoding = true;\r\n    this.encoder.encode(packet, function (encodedPackets) {\r\n      for (var i = 0; i < encodedPackets.length; i++) {\r\n        self.engine.write(encodedPackets[i], packet.options);\r\n      }\r\n      self.encoding = false;\r\n      self.processPacketQueue();\r\n    });\r\n  } else { // add packet to the queue\r\n    self.packetBuffer.push(packet);\r\n  }\r\n};\r\n\r\n/**\r\n * If packet buffer is non-empty, begins encoding the\r\n * next packet in line.\r\n *\r\n * @api private\r\n */\r\n\r\nManager.prototype.processPacketQueue = function () {\r\n  if (this.packetBuffer.length > 0 && !this.encoding) {\r\n    var pack = this.packetBuffer.shift();\r\n    this.packet(pack);\r\n  }\r\n};\r\n\r\n/**\r\n * Clean up transport subscriptions and packet buffer.\r\n *\r\n * @api private\r\n */\r\n\r\nManager.prototype.cleanup = function () {\r\n  debug('cleanup');\r\n\r\n  var subsLength = this.subs.length;\r\n  for (var i = 0; i < subsLength; i++) {\r\n    var sub = this.subs.shift();\r\n    sub.destroy();\r\n  }\r\n\r\n  this.packetBuffer = [];\r\n  this.encoding = false;\r\n  this.lastPing = null;\r\n\r\n  this.decoder.destroy();\r\n};\r\n\r\n/**\r\n * Close the current socket.\r\n *\r\n * @api private\r\n */\r\n\r\nManager.prototype.close =\r\nManager.prototype.disconnect = function () {\r\n  debug('disconnect');\r\n  this.skipReconnect = true;\r\n  this.reconnecting = false;\r\n  if ('opening' === this.readyState) {\r\n    // `onclose` will not fire because\r\n    // an open event never happened\r\n    this.cleanup();\r\n  }\r\n  this.backoff.reset();\r\n  this.readyState = 'closed';\r\n  if (this.engine) this.engine.close();\r\n};\r\n\r\n/**\r\n * Called upon engine close.\r\n *\r\n * @api private\r\n */\r\n\r\nManager.prototype.onclose = function (reason) {\r\n  debug('onclose');\r\n\r\n  this.cleanup();\r\n  this.backoff.reset();\r\n  this.readyState = 'closed';\r\n  this.emit('close', reason);\r\n\r\n  if (this._reconnection && !this.skipReconnect) {\r\n    this.reconnect();\r\n  }\r\n};\r\n\r\n/**\r\n * Attempt a reconnection.\r\n *\r\n * @api private\r\n */\r\n\r\nManager.prototype.reconnect = function () {\r\n  if (this.reconnecting || this.skipReconnect) return this;\r\n\r\n  var self = this;\r\n\r\n  if (this.backoff.attempts >= this._reconnectionAttempts) {\r\n    debug('reconnect failed');\r\n    this.backoff.reset();\r\n    this.emitAll('reconnect_failed');\r\n    this.reconnecting = false;\r\n  } else {\r\n    var delay = this.backoff.duration();\r\n    debug('will wait %dms before reconnect attempt', delay);\r\n\r\n    this.reconnecting = true;\r\n    var timer = setTimeout(function () {\r\n      if (self.skipReconnect) return;\r\n\r\n      debug('attempting reconnect');\r\n      self.emitAll('reconnect_attempt', self.backoff.attempts);\r\n      self.emitAll('reconnecting', self.backoff.attempts);\r\n\r\n      // check again for the case socket closed in above events\r\n      if (self.skipReconnect) return;\r\n\r\n      self.open(function (err) {\r\n        if (err) {\r\n          debug('reconnect attempt error');\r\n          self.reconnecting = false;\r\n          self.reconnect();\r\n          self.emitAll('reconnect_error', err.data);\r\n        } else {\r\n          debug('reconnect success');\r\n          self.onreconnect();\r\n        }\r\n      });\r\n    }, delay);\r\n\r\n    this.subs.push({\r\n      destroy: function () {\r\n        clearTimeout(timer);\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Called upon successful reconnect.\r\n *\r\n * @api private\r\n */\r\n\r\nManager.prototype.onreconnect = function () {\r\n  var attempt = this.backoff.attempts;\r\n  this.reconnecting = false;\r\n  this.backoff.reset();\r\n  this.updateSocketIds();\r\n  this.emitAll('reconnect', attempt);\r\n};\r\n",null]}