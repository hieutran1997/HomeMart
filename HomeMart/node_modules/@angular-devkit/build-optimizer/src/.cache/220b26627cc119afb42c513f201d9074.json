{"remainingRequest":"f:\\HomeMart\\HomeMart\\HomeMart\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!f:\\HomeMart\\HomeMart\\HomeMart\\node_modules\\socket.io-client\\lib\\index.js","dependencies":[{"path":"f:\\HomeMart\\HomeMart\\HomeMart\\node_modules\\socket.io-client\\lib\\index.js","mtime":1535439097621},{"path":"f:\\HomeMart\\HomeMart\\HomeMart\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1535254211933},{"path":"f:\\HomeMart\\HomeMart\\HomeMart\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1535254208003}],"contextDependencies":[],"result":["\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar url = require('./url');\r\nvar parser = require('socket.io-parser');\r\nvar Manager = require('./manager');\r\nvar debug = require('debug')('socket.io-client');\r\n\r\n/**\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = exports = lookup;\r\n\r\n/**\r\n * Managers cache.\r\n */\r\n\r\nvar cache = exports.managers = {};\r\n\r\n/**\r\n * Looks up an existing `Manager` for multiplexing.\r\n * If the user summons:\r\n *\r\n *   `io('http://localhost/a');`\r\n *   `io('http://localhost/b');`\r\n *\r\n * We reuse the existing instance based on same scheme/port/host,\r\n * and we initialize sockets for each namespace.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction lookup (uri, opts) {\r\n  if (typeof uri === 'object') {\r\n    opts = uri;\r\n    uri = undefined;\r\n  }\r\n\r\n  opts = opts || {};\r\n\r\n  var parsed = url(uri);\r\n  var source = parsed.source;\r\n  var id = parsed.id;\r\n  var path = parsed.path;\r\n  var sameNamespace = cache[id] && path in cache[id].nsps;\r\n  var newConnection = opts.forceNew || opts['force new connection'] ||\r\n                      false === opts.multiplex || sameNamespace;\r\n\r\n  var io;\r\n\r\n  if (newConnection) {\r\n    debug('ignoring socket cache for %s', source);\r\n    io = Manager(source, opts);\r\n  } else {\r\n    if (!cache[id]) {\r\n      debug('new io instance for %s', source);\r\n      cache[id] = Manager(source, opts);\r\n    }\r\n    io = cache[id];\r\n  }\r\n  if (parsed.query && !opts.query) {\r\n    opts.query = parsed.query;\r\n  }\r\n  return io.socket(parsed.path, opts);\r\n}\r\n\r\n/**\r\n * Protocol version.\r\n *\r\n * @api public\r\n */\r\n\r\nexports.protocol = parser.protocol;\r\n\r\n/**\r\n * `connect`.\r\n *\r\n * @param {String} uri\r\n * @api public\r\n */\r\n\r\nexports.connect = lookup;\r\n\r\n/**\r\n * Expose constructors for standalone build.\r\n *\r\n * @api public\r\n */\r\n\r\nexports.Manager = require('./manager');\r\nexports.Socket = require('./socket');\r\n",null]}